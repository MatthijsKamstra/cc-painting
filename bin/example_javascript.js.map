{
"version":3,
"file":"example_javascript.js",
"sourceRoot":"file:///",
"sources":["/Users/matthijs/Documents/workingdir_haxe/cc-painting/src/Main.hx","/Users/matthijs/Documents/workingdir_haxe/cc-painting/src/App.hx","/Users/matthijs/Documents/workingdir_haxe/cc-painting/src/Paint00.hx","/usr/local/lib/haxe/std/haxe/iterators/ArrayIterator.hx","/Users/matthijs/Documents/GIT/cc-sketch-plus/src/sketcher/util/MathUtil.hx"],
"sourcesContent":["package;\n\nimport js.Browser.*;\n\n/**\n * @author Matthijs Kamstra aka [mck]\n * MIT\n */\nclass Main {\n\tpublic function new() {\n\n\t\tdocument.addEventListener(\"DOMContentLoaded\", function(event) {\n\t\t\tconsole.log('${App.NAME} Dom ready :: build: ${App.getBuildDate()} ');\n\n\t\t\t// var container = document.getElementById(\"prop\");\n\t\t\t// container.innerHTML = 'html';\n\t\t\tnew Paint00();\n\t\t});\n\t}\n\n\tstatic public function main() {\n\t\tvar app = new Main();\n\t}\n}\n","import haxe.macro.Context;\n\nclass App {\n\tpublic static inline var URL:String = \"https://\";\n\n\tpublic static var NAME:String = \"[example_javascript]\";\n\n\tpublic static inline macro function getBuildDate() {\n\t\t#if !display\n\t\tvar date = Date.now().toString();\n\t\treturn macro $v{date};\n\t\t#else\n\t\tvar date = Date.now().toString();\n\t\treturn macro $v{date};\n\t\t#end\n\t}\n}\n","package;\n\nimport js.html.DivElement;\nimport js.html.Image;\nimport js.html.ImageElement;\nimport js.Browser.*;\nimport sketcher.util.MathUtil;\n\nclass Paint00 {\n\tvar total = 100;\n\n\tpublic function new() {\n\t\tinit();\n\t}\n\n\tfunction init() {\n\t\tvar div:DivElement = cast document.getElementById('painting');\n\t\tvar maxW = div.clientWidth;\n\t\tvar maxH = div.clientHeight;\n\n\t\tfor (i in 0...total) {\n\t\t\tvar dir = 'reverse';\n\t\t\tif (MathUtil.chance(50))\n\t\t\t\tdir = 'normal';\n\n\t\t\tvar w = MathUtil.randomInt(50, 150);\n\t\t\tvar left = MathUtil.randomInt(0, maxW) - (w / 2);\n\t\t\tvar top = MathUtil.randomInt(0, maxH) - (w / 2);\n\n\t\t\tvar img = new Image();\n\t\t\timg.width = w;\n\t\t\timg.src = 'img/sprocket.png';\n\t\t\timg.classList.add('rotate');\n\t\t\timg.style.animationDirection = dir;\n\t\t\timg.style.animationDuration = '${MathUtil.randomInt(30, 100) / 10}s';\n\t\t\timg.style.position = 'absolute';\n\t\t\timg.style.left = '${left}px';\n\t\t\timg.style.top = '${top}px';\n\t\t\tdiv.appendChild(img);\n\t\t}\n\t}\n}\n","/*\n * Copyright (C)2005-2018 Haxe Foundation\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\npackage haxe.iterators;\n\n/**\n\tThis iterator is used only when `Array<T>` is passed to `Iterable<T>`\n**/\nclass ArrayIterator<T> {\n\tfinal array:Array<T>;\n\tvar current:Int = 0;\n\n\t/**\n\t\tCreate a new `ArrayIterator`.\n\t**/\n\t#if !hl inline #end\n\tpublic function new(array:Array<T>) {\n\t\tthis.array = array;\n\t}\n\n\t/**\n\t\tSee `Iterator.hasNext`\n\t**/\n\t#if !hl inline #end\n\tpublic function hasNext() {\n\t\treturn current < array.length;\n\t}\n\n\t/**\n\t\tSee `Iterator.next`\n\t**/\n\t#if !hl inline #end\n\tpublic function next() {\n\t\treturn array[current++];\n\t}\n}\n","package sketcher.util;\n\nimport sketcher.AST;\n\n/**\n * Math related stuff is found here\n * \t\t- radians & convertions\n * \t\t- degree & convertions\n * \t\t- etc\n *\n * @example\n * ```\n * import sketcher.util.MathUtil;\n * MathUtil.random (10);\n *\n * // or\n *\n * import sketcher.util.MathUtil.*;\n * random(10); // make it easier to read\n * ```\n *\n */\nclass MathUtil {\n\t/**\n\t * convert degree to radians\n\t *\n\t * @param deg\n\t * @return Float\n\t */\n\tstatic public function radians(deg:Float):Float {\n\t\treturn deg * Math.PI / 180;\n\t};\n\n\t/**\n\t * convert radians to degree\n\t *\n\t * @param rad\n\t * @return Float\n\t */\n\tstatic public function degrees(rad:Float):Float {\n\t\treturn rad * 180 / Math.PI;\n\t};\n\n\t// public function rotateDegrees(deg) {\n\t// \tthis.rotate(radians(deg));\n\t// }\n\t// public function rotateDeg(deg) {\n\t// \tthis.rotate(radians(deg));\n\t// }\n\tstatic public function degreesToPoint(deg, diameter) {\n\t\tvar rad = Math.PI * deg / 180;\n\t\tvar r = diameter / 2;\n\t\treturn {x: r * Math.cos(rad), y: r * Math.sin(rad)};\n\t}\n\n\tstatic public function distributeAngles(me, total) {\n\t\treturn me / total * 360;\n\t}\n\n\t/**\n\t * calculate distance between two point (x,y)\n\t * easier to remember\n\t *\n\t * @param x1\tpoint 1, xpos\n\t * @param y1\tpoint 1, ypos\n\t * @param x2\tpoint 2, xpos\n\t * @param y2\tpoint 2, ypos\n\t *\n\t * @return  \tdistance between two points\n\t */\n\tstatic public function distance(x1:Float, y1:Float, x2:Float, y2:Float):Float {\n\t\treturn dist(x1, y1, x2, y2);\n\t}\n\n\tstatic public function distancePoint(p0:Point, p1:Point):Float {\n\t\treturn dist(p0.x, p0.y, p1.x, p1.y);\n\t}\n\n\t/**\n\t * calculate distance between two point (x,y)\n\t * easier to remember\n\t *\n\t * @param x1\tpoint 1, xpos\n\t * @param y1\tpoint 1, ypos\n\t * @param x2\tpoint 2, xpos\n\t * @param y2\tpoint 2, ypos\n\t *\n\t * @return  \tdistance between two points\n\t */\n\tstatic public function dist(x1:Float, y1:Float, x2:Float, y2:Float) {\n\t\tx2 -= x1;\n\t\ty2 -= y1;\n\t\treturn Math.sqrt((x2 * x2) + (y2 * y2));\n\t}\n\n\t/**\n\t * [pythagoreanTheorem description]\n\t *\n\t * @example\n\t * \t\t\ttrace (MathUtil.pythagoreanTheorem(0, 5, 10)); // 8.66025403784439\n\t *\t\t\ttrace (MathUtil.pythagoreanTheorem(8.66025403784439, 5, 0)); // 10\n\t *\t\t\ttrace (MathUtil.pythagoreanTheorem(8.66025403784439, 0, 10)); // 5\n\t *\n\t * @param  a \tside A\n\t * @param  b \tside B\n\t * @param  c \thypotenuse C\n\t */\n\tpublic static function pythagoreanTheorem(a:Float = null, b:Float = null, c:Float = null):Float {\n\t\tif (a == null && b == null && c == null) {\n\t\t\ttrace(\"Really? Perhaps you should use some data\");\n\t\t\treturn 0;\n\t\t}\n\t\tvar value = 0.0;\n\n\t\tif (c == null || c == 0)\n\t\t\tvalue = Math.sqrt(a * a + b * b);\n\t\tif (a == null || a == 0)\n\t\t\tvalue = Math.sqrt(c * c - b * b);\n\t\tif (b == null || b == 0)\n\t\t\tvalue = Math.sqrt(c * c - a * a);\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * calculate the circumference of a circle (omtrek)\n\t * \tOmtrek = pi * diameter = 2 * pi * straal\n\t *\n\t * \t@example\n\t * \t\tMathUtil.circumferenceCircle(10); // 62.83185307179586\n\t *\n\t * @param radius \t\t\tradius of circel\n\t * @return Float\t\t\tcircumference\n\t */\n\tstatic public function circumferenceCircle(radius:Float):Float {\n\t\treturn Math.PI * radius * 2;\n\t}\n\n\t/**\n\t * calculate the circumference of a circle (omtrek)\n\t * \tOmtrek = pi * diameter = 2 * pi * straal\n\t *\n\t * \t@example\n\t * \t\tMathUtil.circumference2RadiusCircle(62.83185307179586); // 10\n\t *\n\t * @param circumference \tcircumference of cicle\n\t * @return Float\t\t\tradius circle\n\t */\n\tstatic public function circumference2RadiusCircle(circumference:Float):Float {\n\t\treturn circumference / (Math.PI * 2);\n\t}\n\n\t/**\n\t * Oppervlakte = 1/4 * pi * diameter2 = pi * straal2\n\t *\n\t * \t@example\n\t * \t\tMathUtil.areaCircle(10); // 62.83185307179586\n\t *\n\t * @param radius\n\t * @return Float\n\t */\n\tstatic public function areaCircle(radius:Float):Float {\n\t\treturn Math.PI * Math.sqrt(radius);\n\t}\n\n\t/**\n\t * Get a random number between `min` and `max`\n\t *\n\t * @example\t\tcc.util.MathUtil.randomInteger(10,100); // producess an number between 10 and 100\n\t *\n\t * @param min \tminimum value\n\t * @param max \tmaximum value (optional: if not `max == min` and `min == 0` )\n\t * @return Int\tnumber between `min` and `max`\n\t */\n\tstatic public function randomInteger(min:Int, ?max:Int):Int {\n\t\tif (max == null) {\n\t\t\tmax = min;\n\t\t\tmin = 0;\n\t\t}\n\t\treturn Math.floor(Math.random() * (max + 1 - min)) + min;\n\t}\n\n\tstatic public function randomInt(min, ?max):Int {\n\t\treturn randomInteger(min, max);\n\t}\n\n\t/**\n\t * Get a random number between `min` and `max`\n\t *\n\t * @example\t\tcc.util.MathUtil.random(10,100); // producess an number between 10 and 100\n\t *\n\t * @param min \tminimum value\n\t * @param max \tmaximum value\n\t * @return Float\tnumber between `min` and `max`\n\t */\n\tstatic public function random(?min:Float, ?max:Float):Float {\n\t\tif (min == null) {\n\t\t\tmin = 0;\n\t\t\tmax = 1;\n\t\t} else if (max == null) {\n\t\t\tmax = min;\n\t\t\tmin = 0;\n\t\t}\n\t\treturn (Math.random() * (max - min)) + min;\n\t};\n\n\tstatic public function randomP(?min:Float, ?max:Float) {\n\t\tif (min == null) {\n\t\t\tmin = 0.1;\n\t\t\tmax = 1;\n\t\t} else if (max == null) {\n\t\t\tmax = min;\n\t\t\tmin = 0.1;\n\t\t}\n\t\treturn (Math.random() * (max - min)) + min;\n\t};\n\n\t/**\n\t * Calculate a chance of 80 procent for being true\n\t *\n\t * @example \tMathUtil.chance(80); // 80% chance for true\n\t *\n\t * what I want is chance(80) or chance(0.8)\n\t * and get a 80% change for a true, otherwise false\n\t * chance\n\t * @param value a value between 0 and 1 of 0 and 99\n\t */\n\tstatic public function chance(value:Float):Bool {\n\t\tif (value > 1)\n\t\t\tvalue /= 100;\n\t\t// return (random(value) > value - 1);\n\t\treturn Math.random() < value;\n\t}\n\n\tstatic public function chanceTrue(value:Float):Bool {\n\t\tif (value > 1)\n\t\t\tvalue /= 100;\n\t\treturn Math.random() < value;\n\t}\n\n\tstatic public function chanceFalse(value:Float):Bool {\n\t\tif (value > 1)\n\t\t\tvalue /= 100;\n\t\treturn Math.random() > value;\n\t}\n\n\t/**\n\t * get value 1 or -1\n\t * sort of like the yes/no version (`MathUtil.flip()`)\n\t * usefull for direction change\n\t */\n\tstatic public function posNeg() {\n\t\treturn randomInt(0, 1) * 2 - 1;\n\t}\n\n\t/**\n\t * its either yes or no (true or false)\n\t *\n\t * @example \t\ttrace(MathUtil.flip());\n\t * @return Bool\n\t */\n\tstatic public function flip():Bool {\n\t\treturn Math.random() < 0.5;\n\t}\n\n\t/**\n\t * calculate the angle between two point\n\t * @param cx\t\tcenter point x\n\t * @param cy\t\tcenter point y\n\t * @param ex\t\tend point x\n\t * @param ey\t\tend point y\n\t * @return Float\n\t */\n\tstatic public function angle(cx:Float, cy:Float, ex:Float, ey:Float):Float {\n\t\tvar dy = ey - cy;\n\t\tvar dx = ex - cx;\n\t\tvar theta = Math.atan2(dy, dx); // range (-PI, PI]\n\t\ttheta *= 180 / Math.PI; // rads to degs, range (-180, 180]\n\t\tif (theta < 0)\n\t\t\ttheta = 360 + theta; // range [0, 360);\n\t\tif (theta == 360)\n\t\t\ttheta = 0;\n\t\treturn theta;\n\t}\n\n\tstatic public function map(value, min1, max1, min2, max2, clampResult) {\n\t\tvar returnvalue = ((value - min1) / (max1 - min1) * (max2 - min2)) + min2;\n\t\tif (clampResult)\n\t\t\treturn clamp(returnvalue, min2, max2);\n\t\telse\n\t\t\treturn returnvalue;\n\t};\n\n\t/**\n\t * get an orbit value: use a centerpoint and radius to create points around this centerpoint\n\t *\n\t *\t@example\n\t *\t\timport cc.util.MathUtil;\n\t *\t\tvar point = MathUtil.orbit (100,100,20, 360/4);\n\t *\t\ttrace('${point.x} , ${point.y}');\n\t *\n\t *\n\t * @param xpos center point x\n\t * @param ypos center point y\n\t * @param angle in degree (360)\n\t * @param radius the radius of circle\n\t * @return AST.Point\n\t */\n\tstatic public function orbit(xpos:Float, ypos:Float, angle:Float, radius:Float):AST.Point {\n\t\t// plot the balls x to cos and y to sin\n\t\tvar _xpos = xpos + Math.cos(radians(angle)) * radius;\n\t\tvar _ypos = ypos + Math.sin(radians(angle)) * radius;\n\t\treturn {x: _xpos, y: _ypos};\n\t}\n\n\tstatic public function orbitX(origin:Float, angle:Float, radius:Float):Float {\n\t\treturn origin + Math.cos(radians(angle)) * radius;\n\t}\n\n\tstatic public function orbitY(origin:Float, angle:Float, radius:Float):Float {\n\t\treturn origin + Math.sin(radians(angle)) * radius;\n\t}\n\n\tstatic public function orbitZ(origin:Float, angle:Float, radius:Float):Float {\n\t\treturn origin + Math.cos(radians(angle)) * radius;\n\t}\n\n\t/**\n\t * Randomly shuffle an array\n\t * https://stackoverflow.com/a/2450976/1293256\n\t * @param  {Array} array The array to shuffle\n\t * @return {String}      The first item in the shuffled array\n\t */\n\tstatic public function shuffle(array:Array<Dynamic>):Array<Dynamic> {\n\t\tvar currentIndex = array.length;\n\t\tvar temporaryValue, randomIndex;\n\n\t\t// While there remain elements to shuffle...\n\t\twhile (0 != currentIndex) {\n\t\t\t// Pick a remaining element...\n\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\tcurrentIndex -= 1;\n\n\t\t\t// And swap it with the current element.\n\t\t\ttemporaryValue = array[currentIndex];\n\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\tarray[randomIndex] = temporaryValue;\n\t\t}\n\n\t\treturn array;\n\t};\n\n\t/**\n\t * sent a value, and check if it is in the correct range\n\t *\n\t * @example\n\t * \t MathUtil.clamp(Math.round(r), 0, 255) // a value r should be between 0 and 255\n\t *\n\t * @param value\t\tvalue to check\n\t * @param min\t\tminimum value\n\t * @param max\t\tmaximum value\n\t */\n\tstatic public function clamp(value, min, max) {\n\t\treturn Math.min(Math.max(value, Math.min(min, max)), Math.max(min, max));\n\t}\n\n\t/**\n\t * @example\n\t * \t MathUtil.formatByteSizeString(12586); //\n\t * @param bytes\n\t */\n\tstatic public function formatByteSizeString(bytes:Int):String {\n\t\tif (bytes < 1024)\n\t\t\treturn bytes + \" bytes\";\n\t\telse if (bytes < 1048576)\n\t\t\treturn toFixed((bytes / 1024), 3) + \" KiB\";\n\t\telse if (bytes < 1073741824)\n\t\t\treturn toFixed((bytes / 1048576), 3) + \" MiB\";\n\t\telse\n\t\t\treturn toFixed((bytes / 1073741824), 3) + \" GiB\";\n\t};\n\n\t/**\n\t * return formatByteSize(sizeOf(obj));\n\t *\n\t * trace(MathUtil.formatByteSize(req.responseBytes.length));\n\t * trace(MathUtil.formatByteSizeString(req.responseBytes.length));\n\t *\n\t**/\n\tstatic public function formatByteSize(bytes:Int):Float {\n\t\tif (bytes < 1024)\n\t\t\treturn bytes;\n\t\telse if (bytes < 1048576)\n\t\t\treturn toFixed((bytes / 1024), 3);\n\t\telse if (bytes < 1073741824)\n\t\t\treturn toFixed((bytes / 1048576), 3);\n\t\telse\n\t\t\treturn toFixed((bytes / 1073741824), 3);\n\t};\n\n\t/**\n\t * Uses Math.round to fix a floating point number to a set precision.\n\t * Taken from Franco Ponticelli's THX library: https://github.com/fponticelli/thx/blob/master/src/Floats.hx#L206\n\t *\n\t * @param number\n\t * @param precision = 2\n\t * @return Float\n\t */\n\tpublic static function toFixed(number:Float, ?precision = 2):Float {\n\t\tnumber *= Math.pow(10, precision);\n\t\treturn Math.round(number) / Math.pow(10, precision);\n\t}\n\n\t/**\n\t\tfunction xyz(px, py, pz, pitch, roll, yaw) {\n\n\t\tvar cosa = Math.cos(yaw);\n\t\tvar sina = Math.sin(yaw);\n\n\t\tvar cosb = Math.cos(pitch);\n\t\tvar sinb = Math.sin(pitch);\n\n\t\tvar cosc = Math.cos(roll);\n\t\tvar sinc = Math.sin(roll);\n\n\t\tvar Axx = cosa*cosb;\n\t\tvar Axy = cosa*sinb*sinc - sina*cosc;\n\t\tvar Axz = cosa*sinb*cosc + sina*sinc;\n\n\t\tvar Ayx = sina*cosb;\n\t\tvar Ayy = sina*sinb*sinc + cosa*cosc;\n\t\tvar Ayz = sina*sinb*cosc - cosa*sinc;\n\n\t\tvar Azx = -sinb;\n\t\tvar Azy = cosb*sinc;\n\t\tvar Azz = cosb*cosc;\n\n\t\tx = Axx*px + Axy*py + Axz*pz;\n\t\ty = Ayx*px + Ayy*py + Ayz*pz;\n\t\tz = Azx*px + Azy*py + Azz*pz;\n\n\t\treturn {x:x, y:y, z:z};\n\t\t}\n\t */\n}\n"],
"names":[],
"mappings":";;;WASC,WAEC;AAAA,kCAA0B,mBAAoB,gBAAgB;AAAA,EAC7D,oBAAa,KAAE,WAAS,0BCFV,wBDEoD;AADL,EAK7D;AAL6D;AAA9D;YASD,WACC;AAAA,WAAU;AAAV;cEVD,WAHD;AAAA,CACa,AAAZ,aAAY;AADb,CAIE;AAJF;;OAOC,WAAgB;AAAA,EACf,UAAqB,AAAK,+BAAyB;AADpC,EAEf,WAAW;AAFI,EAGf,WAAW;AAHI,EAKL;AALK,EAKD;AALC,EAKf,KAAK,CAAK,KAAI,KAAd;AAAA,GAAU;AAAV,GACC,UAAW;AADZ,GAEC,EAAI,+BAAgB,KACnB;AAAA,UAAO;AAAP;AAHF,GAKC,QAAQ,iCAAmB,GAAI;AALhC,GAMC,WAAW,iCAAmB,EAAG,QAAQ,AAAC,IAAI;AAN/C,GAOC,UAAU,iCAAmB,EAAG,QAAQ,AAAC,IAAI;AAP9C,GASC,UAAU;AATX,GAUC,YAAY;AAVb,GAWC,UAAW;AAXZ,GAYC,kBAAmB;AAZpB,GAaC,+BAA+B;AAbhC,GAcgC,eAAE,iCAAmB,GAAI,OAAO;AAdhE,GAcC,8BAA+B,MAAmC;AAdnE,GAeC,qBAAsB;AAfvB,GAgBC,iBAAkB,KAAE,OAAK;AAhB1B,GAiBC,gBAAiB,KAAE,MAAI;AAjBxB,GAkBC,gBAAgB;AAlBjB;AALe;;mCCmBR,gBAPT;AAAA,CAEmB,AAAlB,eAAkB;AAFnB,CASE,aAAa;AATf;;UAeS,WAEP;AAAA,SAAO,eAAU;AAAjB;QAMO,WAEP;AAAA,SAAO,WAAM;AAAb;;;uCC0HD,kBAA4D;AAAA,CAC3D,EAAI,QAAO,MAAM;AAAA,EAChB,MAAM;AADU,EAEhB,MAAM;AAFU;AAD0C,CAK3D,OAAO,WAAW,gBAAgB,CAAC,MAAM,IAAI,QAAQ;AALM;mCAQ5D,kBACC;AAAA,QAAO,qCAAc,IAAK;AAA1B;gCA4CD,gBAAgD;AAAA,CAC/C,EAAI,SAAQ,GACX;AAAA,WAAS;AAAT;AAF8C,CAI/C,OAAO,gBAAgB;AAJwB;WH9NhB;;;;"
}